buildscript {
    

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {
        

    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // Use the JaCoCo plugin to calculate code coverage
    id 'jacoco'
    // Use the Checkstyle plugin to enforce a coding style
    id 'checkstyle'
}

allprojects {
    apply plugin: "eclipse" //what is this for?

    version = '1.0'
    ext {
        appName = "piazzaPanic"
        gdxVersion = '1.11.0'
        roboVMVersion = '2.3.16'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/releases"}
    }
}

project(":desktop") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        
    }
}

project(":core") {
    apply plugin: "java-library"


    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        api "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        api "com.badlogicgames.ashley:ashley:$ashleyVersion"
        api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def checkstyleVersion = '10.4'

configurations {
  checkstyleRules
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    checkstyleRules("com.puppycrawl.tools:checkstyle:${checkstyleVersion}") {
        transitive = false
    }
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    config = resources.text.fromArchiveEntry(configurations.checkstyleRules, 'google_checks.xml')
}

